// file.service.js
const {
  S3Client,
  CreateMultipartUploadCommand,
  UploadPartCommand,
  CompleteMultipartUploadCommand,
  AbortMultipartUploadCommand,
} = require("@aws-sdk/client-s3");

const bucketName = "your-bucket-name";

// Set the creadential of aws
const s3Client = new S3Client({
  credentials: {
    accessKeyId: "your-access-key-id",
    secretAccessKey: "your-secret-access-key",
  },
});



exports.s3UploadMultiPart = async (params) => {
    let uploadId;
    try {
        // Run CreateMultipartUploadCommand for get UploadId and start uploading by UploadId.
        const multipartUpload = await s3Client.send(
            new CreateMultipartUploadCommand({
                Bucket: bucketName,
                Key: params.Key, // Path where you want to save the file
            })
        );


        
        // Get "UploadId" from 'multipartUpload'
        uploadId = multipartUpload.UploadId;

        const uploadPromises = [];
        /**
         * Multipart uploads require part size
         * 5 MiB to 5 GiB. There is no minimum size limit on the last part of your multipart upload.
         */
        const minPartSize = 100 * 1024 * 1024; // 100 MB
        // Calculate part size to be within allowable range
        const partSize = Math.max(Math.ceil(params.Body.length / 100), minPartSize);
        // Calculate the number of parts
        const numParts = Math.ceil(params.Body.length / partSize);

        // Upload each part.
        for (let i = 0; i < numParts; i++) {
            const start = i * partSize;
            const end = Math.min(start + partSize, params.Body.length);

            uploadPromises.push(
                s3Client.send(
                    new UploadPartCommand({
                        Bucket: bucketName,
                        Key: params.Key, // Path where you want to save the file
                        UploadId: uploadId,
                        Body: params.Body.slice(start, end), // Slice the file's buffer by calculated part size
                        PartNumber: i + 1, // 
                    })
                ).then((d) => d)
            );
        }

        // Upload each part at a time using Promise.all()
        const uploadResults = await Promise.all(uploadPromises);

        // Run CompleteMultipartUploadCommand after the upload all parts
        return await s3Client.send(
            new CompleteMultipartUploadCommand({
                Bucket: bucketName,
                Key: params.Key, // Path where you want to save the file
                UploadId: uploadId,
                MultipartUpload: {
                    Parts: uploadResults.map(({ ETag }, i) => ({
                        ETag,
                        PartNumber: Number(i + 1),
                    })),
                },
            })
        );
    } catch (error) {
        if (uploadId) {
            // Run AbortMultipartUploadCommand if fetch error while upload parts.
            await s3Client.send(
                new AbortMultipartUploadCommand({
                    Bucket: bucketName,
                    Key: params.Key, // Path where you want to abort the file
                    UploadId: uploadId,
                })
            );
        }
        throw error;
    }
};